import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaInterface;
import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CordovaWebView;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.util.Iterator;

import org.puredata.android.io.AudioParameters;
import org.puredata.android.service.PdService;

public class Pd extends CordovaPlugin {

    private static final String METADATA_LICENSE_KEY = "PD_LICENSE_KEY";

    private static final int ARG_DOCUMENT_URI = 0;
    private static final int ARG_OPTIONS = 1;


    @Override public void initialize(CordovaInterface cordova, CordovaWebView webView) {
        super.initialize(cordova, webView);
	pdService = ((PdService.PdBinder) service).getService();
	try {
	    initPP();
	    loadPD_Patch();
	} catch (IOException e) {
	    Log.e(TAG, e.toString());
	    finish();
	}
    }

    /*
     * How to build pd
     * https://stackoverflow.com/questions/34803288/how-to-recieve-data-from-libpd-pd-for-android
     */
    private void initPD() throws IOException{
	int sampleRate = AudioParameters.suggestSampleRate();
	PdAudio.initAudio(sampleRate,0,2,8,true);

	dispatcher = new PdUiDispatcher();
	PdBase.setReceiver(dispatcher);
	dispatcher.addListener("highLow", myListener);
    }

    private void loadPD_Patch() throws IOException{
	File dir = getFilesDir();
	IoUtils.extractZipResource(getResources().openRawResource(R.raw.simple_android_patch), dir, true);
	File pdPatch =  new File(dir,"simple_android_patch.pd");
	PdBase.openPatch(pdPatch.getAbsoluteFile());
    }

    private void loadPD_RecordPatch() throws IOException{
	File dir = getFilesDir();
	IoUtils.extractZipResource(getResources().openRawResource(R.raw.audio_in_android), dir, true);
	File pdPatch =  new File(dir,"audio_in_android.pd");
	PdBase.openPatch(pdPatch.getAbsoluteFile());
    }

    @Override public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {
        final PSPDFActivityConfiguration configuration = parseOptionsToConfiguration(args.getJSONObject(ARG_OPTIONS));

	try {
	    initPd();
	    loadPatch();
	    return 
		} catch (IOException e) {
	    Log.e(TAG, e.toString());
	    finish();
	}
        if (action.equals("showDocument")) {
            final Uri documentUri = Uri.parse(args.getString(ARG_DOCUMENT_URI));
            this.showDocument(documentUri, configuration, callbackContext);
            return true;
        } else if (action.equals("showDocumentFromAssets")) {
            this.showDocumentFromAssets(args.getString(ARG_DOCUMENT_URI), configuration, callbackContext);
            return true;
        }

        return false;
    }
